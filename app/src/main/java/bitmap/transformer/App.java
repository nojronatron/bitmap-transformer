/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package bitmap.transformer;

import java.io.IOException;
import java.nio.file.InvalidPathException;

public class App {
    public String getGreeting(String[] strings) {
        StringBuilder sb = new StringBuilder();
        sb.append("Inputs received:");

        for (String str : strings) {
            sb.append(" \"").append(str).append("\"");
        }

        sb.append(".");

        return sb.toString();
    }

    public static void main(String[] args) {
        if (args.length != 3) {
            System.out.println("Received " + args.length + " args.");
            System.out.println("3 inputs required: \"input-file-path output-file-path transform-name\".");
            System.out.println("*** Available transforms:\n");
            System.out.println("\t\"bars\": Put the image in a makeshift jail.");
            System.out.println("\t\"rotate\": Rotate the image 90 degrees clockwise");
            System.out.println("***");
            System.out.println("Future transforms: \"mirror\" flip on horizontal.\n");
            return;
        }

        System.out.println(new App().getGreeting(args));

        String inFilePath = args[0];
        String outFilePath = args[1];
        String transformCmd = args[2];

        Bitmap bitmap = new Bitmap(inFilePath, outFilePath, transformCmd);

        try {
            bitmap.getInputFile();
            System.out.println("Read file " + bitmap.getInFilePath() + " successfully.");
        } catch (NullPointerException nullPointer) {
            System.out.println("Unable to read file at " + bitmap.getInFilePath());
            return;
        } catch (IOException inputOutput) {
            System.out.println("A problem occurred while reading " + bitmap.getInFilePath() + ". Is the filename correct?");
            return;
        } catch (InvalidPathException invalidPath) {
            System.out.println(invalidPath.getReason());
            return;
        }

        try {
            bitmap.processFile();
            System.out.println("Successfully applied transformation!");
        } catch (IllegalStateException illegalState) {
            System.out.println(illegalState.getMessage());
            return;
        }

        try {
            bitmap.createOutputFile();
            System.out.println("Wrote changes to file " + bitmap.getOutFilePath());
        } catch (InvalidPathException invalidPath) {
            System.out.println("Unable to create file at " + bitmap.getOutFilePath());
        } catch (IOException inputOutput) {
            System.out.println("Unable to write to file " + bitmap.getOutFilePath());
        }
    }
}
